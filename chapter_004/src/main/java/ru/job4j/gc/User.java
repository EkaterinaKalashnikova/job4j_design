package ru.job4j.gc;

/*
 JVM хранит для каждого объекта:
1. Заголовок объекта;
2. Память для примитивных типов;
3. Память для ссылочных типов;
4. Смещение/выравнивание — по сути, это несколько неиспользуемых байт,
 что размещаются после данных самого объекта. Это сделано для того,
 чтобы адрес в памяти всегда был кратным машинному слову,
 для ускорения чтения из памяти + уменьшения количества бит
 для указателя на объект + предположительно для уменьшения фрагментации памяти.
 Стоит также отметить, что в java размер любого объекта кратен 8 байтам!
 */


import com.carrotsearch.sizeof.RamUsageEstimator;

public class User {
    private int id;
    private String name;
    //private String address;

    public User(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public User(int m) {
    }

    public User(String str) {
    }

    @Override
    protected void finalize() throws Throwable {
        System.out.printf("Removed %d %s%n ", id, name);
    }

    /* XmxNm выделем ключами нужные нам мегабайт памяти и при создании java- объектов
    сбободная память уменьшается, когда java поймет, что свободной памяти мало для создания объектов,
    сама вызыввает сборщик мусора
      Если речь идет о 32-х разрядной системе, то размер заголовка — 8 байт,
      если речь о 64-х разрядной системе, то соответственно — 16 байт

      Объект будет весить:
      1. заголовок - 16 байт, id(int) - 4 байт, (name(String) - 32 байт + 24 байт(char[]) = 56 байт)).
       Итого: 76 байт
      2. заголовок - 16 байт, id(int) - 4 байт, age(int) - 4 байта.
       Итого: 32 байта
  */
}
